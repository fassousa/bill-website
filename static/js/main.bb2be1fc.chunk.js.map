{"version":3,"sources":["components/BillsContainer.js","App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetComponent","setState","isLoading","results","value","handleResultSelect","e","_ref","result","id","sayHi","target","console","log","setTimeout","state","length","re","RegExp","_","escapeRegExp","filter","bills","test","bind","assertThisInitialized","moreInfo","_this2","axios","get","then","response","data","catch","error","selected","autor","author","ano","year","tipo","kind","número","number","nome","name","descrição","description","_this3","_this$state","react_default","a","createElement","Input","className","placeholder","onChange","map","onClick","status","keys","key","bill","Component","components_BillsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb2be1fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Search, Grid, Header, Segment, Input } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport \"./BillsContainer.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.sayHi = this.sayHi.bind(this);\n    this.moreInfo = this.moreInfo.bind(this);\n    this.state = {\n      bills: [],\n      results: [{}],\n      value: \"\",\n      moreInfo: {}\n    };\n  }\n\n  componentWillMount() {\n    axios\n      .get(\"https://floating-journey-70389.herokuapp.com/api/v1/bills.json\")\n      .then(response => {\n        console.log(response);\n        this.setState({ bills: response.data });\n      })\n      .catch(error => console.log(error));\n  }\n\n  resetComponent = () =>\n    this.setState({ isLoading: false, results: [], value: \"\" });\n\n  handleResultSelect = (e, { result }) => this.setState({ value: result.id });\n\n  sayHi = e => {\n    let value = e.target.value;\n    console.log(\"Value0020 value\", value);\n    this.setState({ isLoading: true, value });\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.resetComponent();\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), \"i\");\n      const isMatch = result => re.test(result.id);\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(this.state.bills, isMatch)\n      });\n    }, 300);\n  };\n\n  sayHi2() {\n    console.log(\"HIHiHi\");\n  }\n\n  moreInfo(selected) {\n    this.setState({\n      moreInfo: {\n        autor: selected.author,\n        ano: selected.year,\n        tipo: selected.kind,\n        número: selected.number,\n        nome: selected.name,\n        descrição: selected.description\n      }\n    });\n  }\n\n  render() {\n    const { isLoading, value, results } = this.state;\n\n    return (\n      <div>\n        <Input\n          className=\"input\"\n          placeholder=\"Search bill by number\"\n          onChange={this.sayHi}\n        />\n        {/* {console.log(this.state.bills[0])} */}\n        <ul>\n          {this.state.results.map(result => {\n            return (\n              <li className=\"list\" onClick={() => this.moreInfo(result)}>\n                {result.year} {result.author} {result.status}\n              </li>\n            );\n          })}\n        </ul>\n        {Object.keys(this.state.moreInfo).map(key => {\n          return (\n            <div className=\"cards\">\n              <div className=\"card\">\n                <div className=\"card-header\">\n                  <h2>{key}</h2>\n                </div>\n                <div className=\"card-main\">\n                  <p className=\"main-description\">{this.state.moreInfo[key]}</p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        {this.state.bills.map(bill => {\n          return <div className=\"tile\" key={bill.id} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport BillsContainer from \"./components/BillsContainer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Bills Board</h1>\n        </header>\n        <BillsContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}